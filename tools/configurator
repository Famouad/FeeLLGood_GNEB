#!/usr/bin/env python3

#    XDG Base Directory Specification (le standard officiel)
#    https://specifications.freedesktop.org/basedir-spec/latest/

#    XDG Base Directory
#    (le Wiki de Arch Linux donne des exemples de son utilisation)
#    https://wiki.archlinux.org/title/XDG_Base_Directory

#    File system hierarchy overview
#    (pécise qu'il faut utiliser des sous répertoires dans ~/.config)
#    https://man.archlinux.org/man/file-hierarchy.7

#    XDG Base Directory Specification Usage (spécifique à Gnome, mais donne une astuce pour Python)
#    https://wiki.gnome.org/Initiatives/GnomeGoals/XDGConfigFolders

# apt install python3-pyqt5

import sys
import os

licences = ['None','CC BY','CC BY-SA'] # check

def writeYaml(fileName,metadata):
    config_dir = os.environ.get('XDG_CONFIG_HOME', os.path.join(os.path.expanduser("~"), '.config'))
    configFilePath = config_dir + '/' + "feellgood"
    
    found = os.path.exists(configFilePath)
    if not found:
        try:
            os.mkdir(configFilePath)
        except PermissionError:
            print("not authorized to create", configFilePath)
            sys.exit()

    outputFile = configFilePath + '/' + fileName
    import yaml
    with open(outputFile,'w') as file:
        file.write("# feellgood default parameters\n# This file was generated by feellgood configurator\n")
        yaml.dump(metadata,file)
    message = outputFile + " written."

    return message

try:
    from PyQt5.QtWidgets import QWidget, QLabel, QPushButton, QHBoxLayout, QGridLayout, QLineEdit, QComboBox, QSpinBox, QMessageBox
    from PyQt5.QtCore import Qt

    class MainWindow(QWidget):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)

            self.resize(400,200)
            self.setWindowTitle("feeLLGood config")

            layout = QGridLayout()
            self.setLayout(layout)
            
            # username
            layout.addWidget(QLabel('Username:'), 0, 0)
            self.userNameLineEdit = QLineEdit()
            self.userNameLineEdit.textChanged.connect(self.updateWindowTitle)
            layout.addWidget(self.userNameLineEdit,0,1,1,2)
            
            # affiliation
            layout.addWidget(QLabel('Affiliation:'), 1, 0)
            self.affiliationLineEdit = QLineEdit()
            self.affiliationLineEdit.textChanged.connect(self.updateWindowTitle)
            layout.addWidget(self.affiliationLineEdit,1,1,1,2)

            # licence
            layout.addWidget(QLabel("Licence:"),2,0)
            self.licenceComboBox = QComboBox()
            self.licenceComboBox.setToolTip("Licence of the output file(s).")
            self.licenceComboBox.addItems(licences)
            self.licenceComboBox.currentTextChanged.connect(self.updateWindowTitle)
            layout.addWidget(self.licenceComboBox,2,1,1,2)
            
            #nb threads
            layout.addWidget(QLabel("Nb threads:"),3,0)
            self.nbThreadsSpinBox = QSpinBox()
            self.nbThreadsSpinBox.setToolTip("Equation solver number of threads to use.\n 0 means to match the number of available processors.")
            self.nbThreadsSpinBox.setMinimum(0)
            self.nbThreadsSpinBox.setMaximum(32)
            self.nbThreadsSpinBox.setValue(4)
            layout.addWidget(self.nbThreadsSpinBox,3,1,1,2)
            self.nbThreadsSpinBox.valueChanged.connect(self.updateWindowTitle)
            self.echoText = QLabel("")
            layout.addWidget(self.echoText,5,0,1,3)
            
            # buttons
            self.cancelBtn = QPushButton('Cancel')
            self.cancelBtn.clicked.connect(self.closeEvent)
            self.saveBtn = QPushButton('Save')
            self.saveBtn.clicked.connect(self.writeConfig)
            self.okBtn = QPushButton('Ok')
            self.okBtn.clicked.connect(self.saveAndClose)
            self.hLayout = QHBoxLayout()
            self.hLayout.addWidget(self.cancelBtn)
            self.hLayout.addWidget(self.saveBtn)
            self.hLayout.addWidget(self.okBtn)
            layout.addLayout(self.hLayout,4,0,1,3)
            
#            layout.addWidget(self.cancelBtn, 4, 0, alignment=Qt.AlignmentFlag.AlignLeft)
#            layout.addWidget(self.saveBtn, 4, 1, alignment=Qt.AlignmentFlag.AlignRight)
#            layout.addWidget(self.okBtn, 4, 2)

            self.show()

        def saveAndClose(self):
            self.writeConfig()
            print("config done.")
            sys.exit()

        def writeConfig(self):
            metadata = {}
            metadata["Author"] = self.userNameLineEdit.text()
            metadata["Affiliation"] = self.affiliationLineEdit.text()
            metadata["Licence"] = self.licenceComboBox.currentText()
            metadata["nbThreads"] = int(self.nbThreadsSpinBox.value())
            fileName = "default.yml"
            message = writeYaml(fileName,metadata)
            self.setWindowTitle(" feeLLGood config")
            self.echoText.setText(message)

        def updateWindowTitle(self):
            self.setWindowTitle("*feeLLGood config")
            self.echoText.setText("")

        def closeEvent(self, event):
            close = QMessageBox.question(self, "QUIT", "Are you sure want to quit?", QMessageBox.Yes | QMessageBox.No)
            if close == QMessageBox.Yes:
                if not type(event) == bool:
                    event.accept()
                else:
                    sys.exit()
            else:
                if not type(event) == bool:
                    event.ignore()

except:
    print("PyQt5 not installed.")

def get_params():
    import argparse
    description = 'save configuration for feeLLGood'
    epilogue = '''
    define author and affiliation, licence, nbthreads
    '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-v','--verbose', help='verbose mode, print all inputs', action="store_true")
    parser.add_argument('--version',action='version',version= __version__,help='show the version number')
    args = parser.parse_args()
    return args

def dialog(args):
    print("This is feellgood configurator, to ease metadata author and affiliation handling.")
    metadata = {}
    metadata["Author"] = input("Author: ")
    metadata["Affiliation"] = input("Affiliation: ")
    licenceName = input("What licence among" + str(licences) + " do you want? ")
    if licenceName in licences:
        metadata["Licence"] = licenceName
    else:
        metadata["Licence"] = "undefined"
        
    try:
        nb_th = int(input("Nb threads: "))
    except ValueError:
        print("Error: nb threads must be integer")
        sys.exit()
        
    metadata["nbThreads"] = nb_th
    fileName = "default.yml"
    message = writeYaml(fileName,metadata)
    if args.verbose:
        print("config=", metadata, '\n', message)

def main():
    args = get_params()
    display = os.environ.get('DISPLAY') #might not run correctly on WayLand, see WAYLAND_DISPLAY environment variable 
    if (display is None):
        dialog(args)
    else:
        try:
            from PyQt5.QtWidgets import QApplication
            app = QApplication(sys.argv)
            w = MainWindow()
            app.exec()
        except:
            print("Cannot run Qt5")

__version__ = '0.0.0'
if __name__ == "__main__":
    main()
