#!/usr/bin/env python3

# see https://gmsh.info/doc/texinfo/gmsh.html#x1 for more on parsing mesh with python

import gmsh
import vtk
#from vtk.numpy_interface import dataset_adapter as dsa
import sys
import os
import numpy as np
import re

class mesh(object):
    def __init__ (self,fileName):
        
        self.Tet = []
        self.Names = []
        
        gmsh.initialize()
        gmsh.option.setNumber("General.Terminal",False) # to silent gmsh
        gmsh.open(fileName)
        
        if gmsh.model.getDimension() != 3:
            print('Error : convert2vtk does not support Model ' + gmsh.model.getCurrent() + ' : it is not 3D')
        
        # Get all the mesh nodes:
        nodeTags, nodeCoords, nodeParams = gmsh.model.mesh.getNodes()
        self.Nodes = np.empty([len(nodeTags),3],dtype=float)

        for n in range(0,len(nodeTags)):
            idx = int(nodeTags[n])-1
            self.Nodes[idx][0] = nodeCoords[3*n]
            self.Nodes[idx][1] = nodeCoords[3*n + 1]
            self.Nodes[idx][2] = nodeCoords[3*n + 2]
        
        entities_3D = gmsh.model.getEntities(dim = 3)
        for e in entities_3D:
            dim = 3
            tag = e[1]
            
            # Get the mesh elements for the entity (dim, tag):
            elemTypes, elemTags, elemNodeTags = gmsh.model.mesh.getElements(dim, tag)
            
            if len(elemTypes) != 1:
                print("Error : convert2vtk only handles mesh with tetrahedron elements")
                exit(1)
    
            for n in range(0,len(elemTags[0])):
                idx = int(elemTags[0][n])-1 
                i0 = int(elemNodeTags[0][4*n])
                i1 = int(elemNodeTags[0][4*n+1])
                i2 = int(elemNodeTags[0][4*n+2])
                i3 = int(elemNodeTags[0][4*n+3])
                self.Tet.append([ i0-1 , i1-1, i2-1, i3-1 ])
            # * Does the entity belong to physical groups?
            physicalTags = gmsh.model.getPhysicalGroupsForEntity(dim, tag)
            if len(physicalTags):
                s = ''
                for p in physicalTags:
                    self.Names.append( gmsh.model.getPhysicalName(dim, p))

        gmsh.clear()
        gmsh.finalize()
#        self.infos()


    def infos(self):
        print("nb Nodes: ",len(self.Nodes),"\tnb Tetrahedrons: ",len(self.Tet), "\tphysical names: ", self.Names)

class data(object):
    def __init__(self,fileName,list_idx):
        self.Mag = vtk.vtkFloatArray()
        magFile = open(fileName,'r')
        lines = magFile.readlines()
        magFile.close()
        self.Mag.SetNumberOfComponents(len(list_idx))

        for i in range(0,len(lines)):
            ls = self.filter(lines[i])
            vector = []
            if len(ls)>0:
                self.check_idx(ls,list_idx)
                for idx in list_idx:
                    vector.append(float(ls[idx]))
                self.Mag.InsertNextTuple(vector)
            
                
    def filter(self,line):# the separator is either a '\t' or spaces, because s.sol files may be post-treated
        if not line.startswith('#'): # to ignore comments
            filtered_line = re.sub('\s+','\t',line)
            return filtered_line.strip().split('\t')
        else:
            return []
        

    def check_idx(self,ls,list_idx):
        for i in list_idx:
            if (i > len(ls))or i<0:
                print("error: index out of bounds : index = ",i )
                sys.exit(1)


def get_params():
    import argparse
    description = 'convert .sol to .vtu using gmsh mesh and .sol file'
    epilogue = '''
 build a .vtu file from feellgood output .sol file and .msh mesh file 
   '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('mshFileName', help='a mesh file in gmsh format with .msh extension')
    parser.add_argument('solFileName', help='a .sol feellgood file')
    parser.add_argument('--version',action='version',version= __version__,help='show the version number')
    parser.add_argument('integers',metavar='N',type=int, nargs='*', help='0-based indices of the columns to copy into output .vtu file')
    args = parser.parse_args()
    indices = []
    if len(args.integers)>0:
        indices = args.integers
    else:
        indices = [1,2,3]

    return [args.mshFileName,args.solFileName,indices]

def main():
    #print("This is convert2vtk ", __version__ ,", using VTK " + vtk.vtkVersion.GetVTKVersion(), " and GMSH " + gmsh.__version__ )
    [meshFileName, solFileName, indices] = get_params()

    path, ext = os.path.splitext(meshFileName)
    ext = ext.lower()
    if ext != '.msh':
        print("extension " + ext + "not recognized.")
        sys.exit(1)
    
    msh = mesh(meshFileName)
    my_data = data(solFileName,indices)
    
    points = vtk.vtkPoints()
    points.SetNumberOfPoints(len(msh.Nodes))

    for i in range(0,len(msh.Nodes)):
        points.InsertPoint(i,msh.Nodes[i])
    
    ugrid = vtk.vtkUnstructuredGrid()
    ugrid.SetPoints(points)

# here we insert all the tetraherons, in some append mode, so no need to call ugrid.Allocate
    for i in range(0,len(msh.Tet)):
        ugrid.InsertNextCell(vtk.VTK_TETRA,4,msh.Tet[i])

    newFileName = solFileName[0:solFileName.rfind('.')]
    newFileName += ".vtu"
    
    #the vectors are fixed on each nodes, so we have to associate them to ugrid as Points, not to the cells = tetrahedrons
    if len(indices) == 3:
        print( newFileName ,"saved as 3D vectors, using ", indices ," columns")
        ugrid.GetPointData().SetVectors(my_data.Mag)
    else:
        print(newFileName ,"saved as " + str(len(indices)) + "D scalars, using ", indices ," column(s)")
        ugrid.GetPointData().SetScalars(my_data.Mag)

    writer = vtk.vtkXMLUnstructuredGridWriter()
    
    writer.SetFileName(newFileName)
    writer.SetInputData(ugrid)
    #writer.SetDataModeToAscii() #available only if XML
    writer.Write()

__version__ = '1.0.0'
if __name__ == "__main__":
    main()
