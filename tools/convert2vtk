#!/usr/bin/env python3

import vtk
#from vtk.numpy_interface import dataset_adapter as dsa
import sys
import os
import numpy as np
import re

class mesh(object):
    def __init__ (self,fileName):
        self.Nodes = []
        self.Tet = []
        self.Fac = []
        mshFile = open(fileName,'r')
        count = 0
        current_line =''
        while current_line.strip() != '$MeshFormat':
            current_line = mshFile.readline()

        mshFormat = mshFile.readline()
        if mshFormat.strip() != "2.2\t0\t8\n":
            print("mesh format = 2.2")
        else:
            print("cannot read " + fileName + "file, wrong format, 2.2 required.")
            sys.exit(1)

        while current_line.strip() != '$Nodes':
            current_line = mshFile.readline()
            
        current_line = mshFile.readline()
        print("\treading " + current_line[0:len(current_line)-1] + " nodes...")

        while current_line.strip() != '$EndNodes':
            current_line = mshFile.readline()
            ls = re.sub('\s+','\t',current_line).strip().split("\t")
            if len(ls) == 4:
                self.Nodes.append( [float(ls[1]),float(ls[2]),float(ls[3]) ])

        current_line = mshFile.readline()
        current_line = mshFile.readline()
        print("\treading " + current_line[0:len(current_line)-1] + " Elements...")
 
        while current_line.strip() != '$EndElements':
            current_line = mshFile.readline()
            ls = re.sub('\s+','\t',current_line).strip().split("\t") 
            if len(ls) == 9: # tetrahedrons
                self.Tet.append( [int(ls[5])-1,int(ls[6])-1,int(ls[7])-1,int(ls[8])-1 ])
            elif len(ls) == 8: # triangles
            	self.Fac.append( [int(ls[5])-1,int(ls[6])-1,int(ls[7])-1] )
        mshFile.close()
        self.infos()

    def infos(self):
        print("nb Nodes: ",len(self.Nodes),"\tnb Tetrahedrons: ",len(self.Tet),"\tnb Triangles: ",len(self.Fac))

class data(object):
    def __init__(self,fileName,list_idx):
        self.Mag = vtk.vtkFloatArray()
        magFile = open(fileName,'r')
        lines = magFile.readlines()
        magFile.close()
        self.check_idx(lines[1],list_idx)
        self.Mag.SetNumberOfComponents(len(list_idx))

        # first .sol line is always "#t = xxx", so it is skipped starting from i=1
        for i in range(1,len(lines)):
            ls = self.filter(lines[i])
            vector = []
            for idx in list_idx:
                vector.append(float(ls[idx]))
            self.Mag.InsertNextTuple(vector)
                
    def filter(self,line):# the separator is either a '\t' or a spaces, because some people may post-treat .sol files
        filtered_line = re.sub('\s+','\t',line)
        return filtered_line.strip().split('\t')

    def check_idx(self,line,list_idx):
        ls = self.filter(line)
        for i in list_idx:
            if (i > len(ls))or i<0:
                print("error: index out of bounds.")
                sys.exit(1)


def get_params():
    import argparse
    description = 'convert .sol to .vtk using gmsh mesh.'
    epilogue = '''
 convert feellgood output .sol files to .vtk file using mesh in gmsh version 2.2 format 
   '''
    parser = argparse.ArgumentParser(description=description, epilog=epilogue,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('mshFileName', help='a mesh file in gmsh 2.2 text format with .msh extension')
    parser.add_argument('solFileName', help='a .sol feellgood file')
    parser.add_argument('integers',metavar='N',type=int, nargs='*', help='indices of the column to copy into output .vtu file')
    args = parser.parse_args()
    indices = []
    if len(args.integers)>0:
        indices = args.integers
    else:
        indices = [4,5,6]

    return [args.mshFileName,args.solFileName,indices]

def main():
    print("This is convert2vtk python script, using vtk version " + vtk.vtkVersion.GetVTKVersion())
    [meshFileName, solFileName, indices] = get_params()

    path, ext = os.path.splitext(meshFileName)
    ext = ext.lower()
    if ext == '.msh':
        print("input mesh file is ", meshFileName)
    else:
        print("extension " + ext + "not recognized.")
        sys.exit(1)
    
    msh = mesh(meshFileName)
    my_data = data(solFileName,indices)
    
    points = vtk.vtkPoints()
    points.SetNumberOfPoints(len(msh.Nodes))

    for i in range(0,len(msh.Nodes)):
        points.InsertPoint(i,msh.Nodes[i])
    
    ugrid = vtk.vtkUnstructuredGrid()
    ugrid.SetPoints(points)

# here we insert all the tetraherons, in some append mode, so no need to call ugrid.Allocate
    for i in range(0,len(msh.Tet)):
        ugrid.InsertNextCell(vtk.VTK_TETRA,4,msh.Tet[i])

    #the vectors are fixed on each nodes, so we have to associate them to ugrid as Points, not to the cells = tetrahedrons
    if len(indices) == 3:
        print("save data as 3D vectors, using ", indices ," columns")
        ugrid.GetPointData().SetVectors(my_data.Mag)
    else:
        print("save data as " + str(len(indices)) + "D scalars, using ", indices ," columns")
        ugrid.GetPointData().SetScalars(my_data.Mag)

    writer = vtk.vtkXMLUnstructuredGridWriter()
    newFileName = solFileName[0:solFileName.rfind('.')]
    newFileName += ".vtu"
    writer.SetFileName(newFileName)
    writer.SetInputData(ugrid)
    
    #writer.SetDataModeToAscii() #available only if XML
    writer.Write()
    print("VTK file " + newFileName + " written.")

if __name__ == "__main__":
    main()
