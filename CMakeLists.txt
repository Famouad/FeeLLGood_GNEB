cmake_minimum_required(VERSION 3.13)
PROJECT(FEELLGOOD)

ENABLE_LANGUAGE(CXX)

MESSAGE(STATUS "CXX ${CMAKE_CXX_COMPILER_ID}")

find_package(OpenMP REQUIRED)


# does not work, but should have been equivalent to command-line option of `-DCMAKE_PREFIX_PATH=...`
#list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
#message(STATUS "${CMAKE_MODULE_PATH}")

find_package(TBB REQUIRED)
if(TBB_FOUND)
    message(STATUS "TBB Found")
else()
    message(FATAL_ERROR "TBB NOT FOUND")
endif()

set(MKL_THREADING gnu_thread) # instead of default value intel_thread that might be the reason why OMP_LIBRARY-NOTFOUND
set(MKL_INTERFACE lp64) # from eigen3 official doc, we need that to get eigen work with intel mkl

# Alternative to find_package(MKL REQUIRED)
execute_process(
    COMMAND pkg-config --cflags mkl-dynamic-lp64-iomp
    OUTPUT_VARIABLE MKL_CFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
    COMMAND pkg-config --libs mkl-dynamic-lp64-iomp
    OUTPUT_VARIABLE MKL_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE
)

find_package(Eigen3 3.3 REQUIRED NO_MODULE)

#===========================================================================
# these parameters are used to build a config.h file 
#===========================================================================

execute_process(
    COMMAND git describe --tags --always --dirty
    OUTPUT_VARIABLE FEELLGOOD_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE
)
# remove leading "v" from tag name
string(REGEX REPLACE "^v" "" FEELLGOOD_VERSION ${FEELLGOOD_VERSION})

# FEELLGOOD_VERSION generated by project()
MESSAGE(STATUS "feeLLGood version = ${FEELLGOOD_VERSION}")

#===========================================================================
# Compiler options -ffast-math
# -msse4.2 -mfpmath=sse (on X86 -mfpmath=sse is set by default ) or -mavx
# -fsanitize=address leak  null (to debug memory leak) undefined
#===========================================================================

# Link-time optimization requires cmake version at least 3.9.
option(ENABLE_LTO "Enable link-time optimization" OFF)
message(STATUS "Link-time optimization: ENABLE_LTO = " ${ENABLE_LTO})
if(${ENABLE_LTO})
    cmake_policy(SET CMP0069 NEW)
    include(CheckIPOSupported)
    check_ipo_supported()
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()
#
set(CMAKE_CXX_FLAGS
    "-DNDEBUG -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DEIGEN_USE_MKL_ALL -Wall -Wextra -std=c++17 -O3 -march=native ${MKL_CFLAGS}"
    CACHE STRING "C++ compiler flags used during builds." FORCE)

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MKL_LIBS} -fopenmp")

SET(HEADERS config.h vecND.h pt3D.h node.h expression_parser.h mesh.h electrostatSolver.h
    spinTransferTorque.h time_integration.h feellgoodSettings.h tetra.h
    facette.h triangle.h surface.h linear_algebra.h log-stats.h tags.h
    chronometer.h element.h tiny.h)

SET(SOURCES feellgoodSettings.cpp time_integration.cpp solver.cpp
    read.cpp save.cpp linear_algebra.cpp recentering.cpp tetra.cpp
    energy.cpp facette.cpp expression_parser.cpp chronometer.cpp
    tags.cpp)

configure_file(config.h.in ./config.h)

add_custom_command(
    OUTPUT default-settings.o
    COMMAND ld -r -b binary -z noexecstack default-settings.yml -o default-settings.o
    DEPENDS default-settings.yml)

ADD_EXECUTABLE(feellgood main.cpp ${HEADERS} ${SOURCES} default-settings.o)

TARGET_LINK_LIBRARIES(feellgood yaml-cpp scalfmm duktape ANN OpenMP::OpenMP_CXX TBB::tbb Eigen3::Eigen) 

#===========================================================================
# Find where to install the Python modules.
#===========================================================================

# Find the version of the Python interpreter.
# Keep only the major and minor version numbers, e.g. "3.10".
execute_process(COMMAND python3 --version OUTPUT_VARIABLE PYTHON_VERSION)
string(
    REGEX REPLACE "Python ([0-9]+\\.[0-9]+)\\..*" "\\1"
    PYTHON_VERSION "${PYTHON_VERSION}"
)

# Possible install locations. The fisrt one (dist-packages) is used by the
# system Python on Debian and Debian-like systems. This is our preferred
# install location, and it will be used if it exists. The second one should
# work with any non-Debianized Python interpreter.
set(PY_DIST_DIR "lib/python${PYTHON_VERSION}/dist-packages")
set(PY_SITE_DIR "lib/python${PYTHON_VERSION}/site-packages")

# Select the best available installation directory.
if(EXISTS "${CMAKE_INSTALL_PREFIX}/${PY_DIST_DIR}")
    set(PY_MODULES_DIR "${PY_DIST_DIR}/feellgood")
elseif(PYTHON_VERSION)
    set(PY_MODULES_DIR "${PY_SITE_DIR}/feellgood")
endif()

# Install the python modules if we found a suitable location.
if(DEFINED PY_MODULES_DIR)
    install(DIRECTORY python-modules/ DESTINATION ${PY_MODULES_DIR})
    message(STATUS "Python modules will be installed in ${CMAKE_INSTALL_PREFIX}/${PY_MODULES_DIR}")
else()
    message(WARNING "Python modules will not be installed.")
endif()

#===========================================================================

install(TARGETS feellgood RUNTIME DESTINATION bin)
install(PROGRAMS ./tools/convert2vtk DESTINATION bin)
install(PROGRAMS ./tools/convert2hdf5 DESTINATION bin)
install(PROGRAMS ./tools/h5extract DESTINATION bin)
install(PROGRAMS ./tools/fg-merge-sol DESTINATION bin)

#===========================================================================
# unit tests, by default it is not built.
# you have to switch it ON while cmaking to build the unit tests and to be able to call 'make test' afterward:
#  cmake . -DENABLE_UTESTS=ON
# NB: ENABLE_UTESTS value is written in CMakeCache.txt
#===========================================================================

option(ENABLE_UTESTS "Enable tests" OFF)
message( STATUS "enable unit tests: ENABLE_UTESTS = "  ${ENABLE_UTESTS} )

#===========================================================================
#  cmake . -DENABLE_DET_UTESTS=ON
# this option forces random numbers to be deterministic 
#===========================================================================

option(ENABLE_DET_UTESTS "Enable deterministic unit tests" OFF)
message( STATUS "enable deterministic unit tests: ENABLE_DET_UTESTS = "  ${ENABLE_DET_UTESTS} )

if(${ENABLE_DET_UTESTS})
    set(DET_UTESTS true )
else()
    set(DET_UTESTS false )
endif()

if(${ENABLE_UTESTS})
    configure_file(./unit-tests/ut_config.h.in ./unit-tests/ut_config.h)
    include(CTest)
    add_subdirectory(unit-tests)
endif()

