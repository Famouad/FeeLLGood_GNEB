if(POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW) # CMake 3.0.0
endif()

PROJECT (FEELLGOOD)
cmake_minimum_required(VERSION 3.0)

ENABLE_LANGUAGE(CXX)

MESSAGE(STATUS "CXX ${CMAKE_CXX_COMPILER_ID}")

#===========================================================================
# these parameters are used to build a config.h file 
#===========================================================================

execute_process(
    COMMAND git describe --tags --always --dirty
    OUTPUT_VARIABLE FEELLGOOD_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE
)
string(SUBSTRING ${FEELLGOOD_VERSION} 1 -1 FEELLGOOD_VERSION)  # remove leading "v"

# FEELLGOOD_VERSION generated by project()
MESSAGE(STATUS "feeLLGood version = ${FEELLGOOD_VERSION}")

execute_process(
    COMMAND getconf _NPROCESSORS_ONLN
    OUTPUT_VARIABLE MAX_NB_THREADS OUTPUT_STRIP_TRAILING_WHITESPACE
)
MESSAGE(STATUS "MAX_NB_THREADS = ${MAX_NB_THREADS}")

#===========================================================================
# Compiler options -ffast-math
# -msse4.2 -mfpmath=sse (on X86 -mfpmath=sse is set by default ) or -mavx
# -fsanitize=address leak  null (to debug memory leak) undefined
#===========================================================================

# Link-time optimization requires cmake version at least 3.9.
option(ENABLE_LTO "Enable link-time optimization" OFF)
message(STATUS "Link-time optimization: ENABLE_LTO = " ${ENABLE_LTO})
if(${ENABLE_LTO})
    cmake_policy(SET CMP0069 NEW)
    include(CheckIPOSupported)
    check_ipo_supported()
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

set( CMAKE_CXX_FLAGS "-DNDEBUG -Wall -Wextra -std=c++14 -fopenmp -O3 -march=native" CACHE STRING "C++ compiler flags used during builds." FORCE )

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fopenmp")

SET(HEADERS config.h pt3D.h node.h matBlocDiag.h mag_parser.h mesh.h electrostatSolver.h
    time_integration.h feellgoodSettings.h tetra.h facette.h linear_algebra.h
    log-stats.h)

SET(SOURCES mag_parser.cpp time_integration.cpp feellgoodSettings.cpp
    solver.cpp tetra.cpp facette.cpp read.cpp save.cpp
    linear_algebra.cpp energy.cpp recentering.cpp tiny.h)

configure_file(config.h.in ./config.h)

add_custom_command(
    OUTPUT default-settings.o
    COMMAND ld -r -b binary -z noexecstack default-settings.yml -o default-settings.o
    DEPENDS default-settings.yml)

ADD_EXECUTABLE(feellgood main.cpp ${HEADERS} ${SOURCES} default-settings.o)

TARGET_LINK_LIBRARIES(feellgood yaml-cpp scalfmm ANN)

if(DEFINED withSharedLib)
    MESSAGE( "Shared lib generation " ${withSharedLib} )
    if (withSharedLib)
        ADD_LIBRARY( _feellgood SHARED ${HEADERS} ${SOURCES} )
        install(FILES feellgood_core.h DESTINATION include)
        install(TARGETS _feellgood DESTINATION lib)
    endif(withSharedLib)
endif(DEFINED withSharedLib)

install(TARGETS feellgood RUNTIME DESTINATION bin)
install(PROGRAMS ./tools/convert2vtk DESTINATION bin)

#===========================================================================
# unit tests, by default it is not built. you have to switch it ON while cmaking to build the unit tests and to be able to call 'make test' afterward:
#  cmake . -DENABLE_UTESTS=ON
# NB: ENABLE_UTESTS value is written in CMakeCache.txt
#===========================================================================

option(ENABLE_UTESTS "Enable tests" OFF)
message( STATUS "enable unit tests: ENABLE_UTESTS = "  ${ENABLE_UTESTS} )

#===========================================================================
#  cmake . -DENABLE_DET_UTESTS=ON
# this option forces random numbers to be deterministic 
#===========================================================================

option(ENABLE_DET_UTESTS "Enable deterministic unit tests" OFF)
message( STATUS "enable deterministic unit tests: ENABLE_DET_UTESTS = "  ${ENABLE_DET_UTESTS} )

if(${ENABLE_DET_UTESTS})
    set(DET_UTESTS true )
else()
    set(DET_UTESTS false )
endif()

if(${ENABLE_UTESTS})
    configure_file(./unit-tests/ut_config.h.in ./unit-tests/ut_config.h)
    include(CTest)
    add_subdirectory(unit-tests)
endif()

